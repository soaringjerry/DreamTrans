name: CI - Code Quality

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint-and-test:
    name: Lint & Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write  # Required for uploading SARIF files
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # ---- Frontend CI ----
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: npm ci
        working-directory: ./frontend

      - name: Lint frontend
        run: npm run lint
        working-directory: ./frontend
        continue-on-error: true  # Allow workflow to continue if lint fails initially

      - name: Type check frontend
        run: npm run type-check
        working-directory: ./frontend

      - name: Check frontend build
        run: npm run build
        working-directory: ./frontend
        env:
          VITE_BACKEND_URL: /
          VITE_BACKEND_WS_URL: /

      # ---- Backend CI ----
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.4'
          cache-dependency-path: backend/go.sum

      - name: Lint backend with golangci-lint-action
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest  # Use latest version which should support Go 1.24
          working-directory: backend
          args: --timeout=5m
          skip-cache: true  # Skip cache to ensure fresh install
        continue-on-error: true  # Allow workflow to continue if lint fails initially

      - name: Test backend
        run: go test -v -race -coverprofile=coverage.txt ./...
        working-directory: ./backend

      - name: Upload backend coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.txt
          flags: backend
          token: ${{ secrets.CODECOV_TOKEN }}
        continue-on-error: true  # Don't fail if codecov is not configured

      # ---- Security Scan ----
      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  # Separate job for build verification
  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: lint-and-test
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Verify Docker build
        run: |
          docker build --target frontend-builder -t test-frontend .
          docker build --target backend-builder -t test-backend .